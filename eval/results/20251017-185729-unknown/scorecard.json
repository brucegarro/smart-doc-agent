{
  "env": {
    "embedder_model": "BAAI/bge-small-en-v1.5",
    "git_sha": "unknown",
    "ingest_time_per_page_budget_sec": 5.0,
    "retrieval_k": 5,
    "text_llm_model": "qwen2.5:7b-instruct-q4_K_M",
    "vlm_model": "qwen2-vl:7b-instruct-q4_K_M"
  },
  "gates": {
    "all": false,
    "boot": true,
    "extraction": true,
    "ingestion": true,
    "math": true,
    "perf": true,
    "queries": false
  },
  "metrics": {
    "overall_score": 0.6666666666666666,
    "runtime_seconds": 18.134556770324707
  },
  "run_id": "20251017-185729-unknown",
  "scenarios": {
    "boot": {
      "artifacts": {
        "checks": [
          {
            "detail": "postgres ready",
            "latency_seconds": 0.0028908329986734316,
            "name": "postgres",
            "status": "passed"
          },
          {
            "detail": "minio ready (200)",
            "latency_seconds": 0.011493042002257425,
            "name": "minio",
            "status": "passed"
          },
          {
            "detail": "ollama ready (200)",
            "latency_seconds": 0.011294667005131487,
            "name": "ollama",
            "status": "passed"
          },
          {
            "detail": "redis ready",
            "latency_seconds": 0.0005357090049074031,
            "name": "redis",
            "status": "passed"
          },
          {
            "detail": "app healthcheck disabled",
            "latency_seconds": 4.165995051153004e-06,
            "name": "app",
            "status": "warn"
          },
          {
            "detail": "worker assumed ready",
            "latency_seconds": 0.0004682500002672896,
            "name": "worker",
            "status": "passed"
          }
        ]
      },
      "details": [
        "postgres:passed",
        "minio:passed",
        "ollama:passed",
        "redis:passed",
        "app:warn",
        "worker:passed"
      ],
      "duration_seconds": 0.02701791699655587,
      "metrics": {
        "services_checked": 6,
        "services_failed": 0,
        "services_passed": 5,
        "services_warn": 1
      },
      "status": "warn"
    },
    "db_setup": {
      "artifacts": {},
      "details": [
        "created:docdb_eval_20251017_185729_unknown"
      ],
      "duration_seconds": 0.046650374999444466,
      "metrics": {
        "database": "docdb_eval_20251017_185729_unknown"
      },
      "status": "passed"
    },
    "extraction": {
      "artifacts": {
        "fixtures": [
          {
            "document_id": "3061ea24-ee4b-4cff-be26-846865e76b4a",
            "fields": {
              "abstract": "The dominant sequence transduction models are based on complex recurrent or convolutional neural networks in an encoder-decoder configuration. The best performing models also connect the encoder and decoder through an attention mechanism. We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely. Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train. Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task, improving over existing best results, including ensembles, by over 2 BLEU. On the WMT 2014 English-to-French translation task, our model establishes a new single-model state-of-the-art BLEU score of 41.8 after training for 3.5 days on eight GPUs. We show that the Transformer generalizes well to other tasks by applying it successfully to English constituency parsing both with large and limited training data.",
              "authors": [
                "Ashish Vaswani",
                "Noam Shazeer",
                "Niki Parmar",
                "Jakob Uszkoreit",
                "Llion Jones",
                "Aidan N. Gomez",
                "Lukasz Kaiser",
                "Illia Polosukhin"
              ],
              "title": "Attention Is All You Need"
            }
          },
          {
            "document_id": "doc_batch_normalization",
            "fields": {
              "abstract": "Training deep neural networks is complicated by the fact that the distribution of each layer's inputs changes during training, as the parameters of the previous layers change. This slows down the training by requiring lower learning rates and careful parameter initialization, and makes it notoriously hard to train models with saturating nonlinearities. We refer to this phenomenon as internal covariate shift, and address the problem by normalizing layer inputs. Our method draws its strength from making normalization a part of the model architecture and performing the normalization for each training mini-batch. Batch Normalization allows us to use much higher learning rates and be less careful about initialization. It also acts as a regularizer, in some cases eliminating the need for Dropout. Applied to a state-of-the-art image classification model, Batch Normalization achieves the same accuracy with 14 times fewer training steps, and beats the original model by a significant margin.",
              "authors": [
                "Sergey Ioffe",
                "Christian Szegedy"
              ],
              "title": "Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift"
            }
          },
          {
            "document_id": "doc_deep_residual_learning",
            "fields": {
              "abstract": "Deeper neural networks are more difficult to train. We present a residual learning framework to ease the training of networks that are substantially deeper than those used previously. We explicitly reformulate the layers as learning residual functions with reference to the layer inputs, instead of learning unreferenced functions. We provide comprehensive empirical evidence showing that these residual networks are easier to optimize, and can gain accuracy from considerably increased depth. On the ImageNet dataset we evaluate residual nets with a depth of up to 152 layers, 8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the ImageNet test set. This result won the 1st place on the ILSVRC 2015 classification task. We also present analysis on CIFAR-10 with 100 and 1000 layers.",
              "authors": [
                "Kaiming He",
                "Xiangyu Zhang",
                "Shaoqing Ren",
                "Jian Sun"
              ],
              "title": "Deep Residual Learning for Image Recognition"
            }
          }
        ]
      },
      "details": [
        "extraction scoring not implemented"
      ],
      "duration_seconds": 0.0,
      "metrics": {
        "fixtures_total": 5
      },
      "status": "warn"
    },
    "ingestion": {
      "artifacts": {
        "documents": [
          "63cbfa6e-7757-451f-8cab-234539a3dfb9",
          "0630fd11-6740-443f-ac36-438c78f0fedd",
          "4a36966a-4371-4ab9-8a0e-c30b14e7bb3e",
          "d0092452-f3fb-424b-8816-825e66197d72",
          "46757510-b426-44b5-80a8-8a971cb95842"
        ]
      },
      "details": [
        "ingested:63cbfa6e-7757-451f-8cab-234539a3dfb9",
        "ingested:0630fd11-6740-443f-ac36-438c78f0fedd",
        "ingested:4a36966a-4371-4ab9-8a0e-c30b14e7bb3e",
        "ingested:d0092452-f3fb-424b-8816-825e66197d72",
        "ingested:46757510-b426-44b5-80a8-8a971cb95842"
      ],
      "duration_seconds": 17.762324007984716,
      "metrics": {
        "avg_time_per_doc_sec": 3.552464801596943,
        "document_ids": [
          "63cbfa6e-7757-451f-8cab-234539a3dfb9",
          "0630fd11-6740-443f-ac36-438c78f0fedd",
          "4a36966a-4371-4ab9-8a0e-c30b14e7bb3e",
          "d0092452-f3fb-424b-8816-825e66197d72",
          "46757510-b426-44b5-80a8-8a971cb95842"
        ],
        "documents_attempted": 5,
        "documents_failed": 0,
        "documents_ingested": 5,
        "durations_sec": [
          4.137588000994583,
          2.9573211679962697,
          3.5699053349962924,
          3.7922377939976286,
          3.3052717099999427
        ],
        "ingest_time_per_page_sec": 0.24669894455534327,
        "total_pages": 72,
        "total_time_sec": 17.762324007984716
      },
      "status": "passed"
    },
    "math": {
      "artifacts": {
        "fixtures": [
          {
            "document_id": "3061ea24-ee4b-4cff-be26-846865e76b4a",
            "id": "scaled-attention",
            "latex_gold": "\\mathrm{Attention}(Q,K,V)=\\mathrm{softmax}\\left(\\frac{QK^T}{\\sqrt{d_k}}\\right)V",
            "notes": "Scaled dot-product attention from Section 3.2."
          }
        ]
      },
      "details": [
        "math scoring not implemented"
      ],
      "duration_seconds": 0.0,
      "metrics": {
        "fixtures_total": 1
      },
      "status": "warn"
    },
    "perf": {
      "artifacts": {},
      "details": [],
      "duration_seconds": 0.0,
      "metrics": {
        "ingestion_avg_time_sec": 3.552464801596943,
        "ingestion_total_time_sec": 17.762324007984716,
        "query_p50_ms": 27.157959004398435,
        "query_p95_ms": 76.41845879770696
      },
      "status": "passed"
    },
    "queries": {
      "artifacts": {
        "queries": [
          {
            "gold_passages": [
              "We propose a new simple network architecture, the Transformer, based solely on attention mechanisms, dispensing with recurrence and convolutions entirely."
            ],
            "hit_at_k": 0.0,
            "id": "attn-arch",
            "latency_ms": 91.70108399848687,
            "match_strategy": "passage",
            "ndcg_at_k": 0.7840134157137602,
            "query": "What architecture does the paper introduce?",
            "retrieved_fingerprints": [
              "28d5a72b6d5c5e0a3b870bc2",
              "947dd3ed4d38e8983011de72",
              "54a86f76bb26b2794863f67b",
              "3125086d48740ea6b252f541",
              "7273d7b9486c17ae8b674895"
            ],
            "retrieved_snippets": [
              "Appendix Variant of the Inception Model Used Figure 5 documents the changes that were performed compared to the architecture with respect to the GoogleNet archictecture. For the interpretation of t...",
              "[40] Muhua Zhu, Yue Zhang, Wenliang Chen, Min Zhang, and Jingbo Zhu. Fast and accurate shift-reduce constituent parsing. In Proceedings of the 51st Annual Meeting of the ACL (Volume 1: Long Papers)...",
              "Model Architecture BERT\u2019s model architec- ture is a multi-layer bidirectional Transformer en- coder based on the original implementation de- scribed in Vaswani et al. ( 2017 ) and released in the t...",
              "3.3. Network Architectures We have tested various plain/residual nets, and have ob- served consistent phenomena. To provide instances for dis- cussion, we describe two models for ImageNet as follows.",
              "[36] Christian Szegedy, Vincent Vanhoucke, Sergey Ioffe, Jonathon Shlens, and Zbigniew Wojna. Rethinking the inception architecture for computer vision. CoRR , abs/1512.00567, 2015. [37] Vinyals &..."
            ],
            "similarity_scores": [
              0.12307692307692308,
              0.12911084043848964,
              0.13801452784503632,
              0.33994334277620397,
              0.17070600632244468
            ],
            "top_similarity": 0.33994334277620397
          },
          {
            "gold_passages": [
              "The encoder is composed of a stack of N=6 identical layers."
            ],
            "hit_at_k": 0.0,
            "id": "encoder-depth",
            "latency_ms": 26.827832996787038,
            "match_strategy": "passage",
            "ndcg_at_k": 0.9772790896234537,
            "query": "How many layers are stacked in the Transformer encoder?",
            "retrieved_fingerprints": [
              "86b26b578bc87eca23f2a2b0",
              "73b99b6d7996a29ff70d18e7",
              "46d9f9f9a6ab88137206c04c",
              "4432bab7ecc96dd117e56de7",
              "8e782ffdf830103683cbf365"
            ],
            "retrieved_snippets": [
              "Encoder: The encoder is composed of a stack of N = 6 identical layers. Each layer has two sub-layers. The first is a multi-head self-attention mechanism, and the second is a simple, position- wise...",
              "Most competitive neural sequence transduction models have an encoder-decoder structure [ 5 , 2 , 35 ]. Here, the encoder maps an input sequence of symbol representations ( x 1 , ..., x n ) to a seq...",
              "Deep-Att + PosUnk Ensemble [39] 40.4 8 . 0 \u00b7 10 20 GNMT + RL Ensemble [38] 26.30 41.16 1 . 8 \u00b7 10 20 1 . 1 \u00b7 10 21 ConvS2S Ensemble [9] 26.36 41.29 7 . 7 \u00b7 10 19 1 . 2 \u00b7 10 21 Transformer (base mod...",
              "Decoder: The decoder is also composed of a stack of N = 6 identical layers. In addition to the two sub-layers in each encoder layer, the decoder inserts a third sub-layer, which performs multi-head...",
              "(middle/right). The network inputs are 32 \u00d7 32 images, with the per-pixel mean subtracted. The \ufb01rst layer is 3 \u00d7 3 convo- lutions. Then we use a stack of 6 n layers with 3 \u00d7 3 convo- lutions on the..."
            ],
            "similarity_scores": [
              0.16833095577746077,
              0.10035005834305717,
              0.090625,
              0.12083333333333333,
              0.1260053619302949
            ],
            "top_similarity": 0.16833095577746077
          },
          {
            "gold_passages": [
              "The Transformer uses multi-head attention in three different ways: In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer, and the memory keys and values come from the output of the encoder. This allows every position in the decoder to attend over all positions in the input sequence. This mimics the typical encoder-decoder attention mechanisms in sequence-to-sequence models such as [38, 2, 9]. The encoder contains self-attention layers. In a self-attention layer all of the keys, values and queries come from the same place, in this case, the output of the previous layer in the encoder. Each position in the encoder can attend to all positions in the previous layer of the encoder. Similarly, self-attention layers in the decoder allow each position in the decoder to attend to all positions in the decoder up to and including that position."
            ],
            "hit_at_k": 0.0,
            "id": "multihead-uses",
            "latency_ms": 31.57774999999674,
            "match_strategy": "passage",
            "ndcg_at_k": 0.9238547537412173,
            "query": "List the three ways multi-head attention is used in the Transformer.",
            "retrieved_fingerprints": [
              "59814d7fbd14f3abf585dde2",
              "32a838f5e3eb370207dd4610",
              "339eb40dcc08722dca354581",
              "02941eba9be9a7a66d5c6652",
              "bcf07b7aa5764c56d4950e7c"
            ],
            "retrieved_snippets": [
              "Where the projections are parameter matrices W Q i \u2208 R d model \u00d7 d k , W K i \u2208 R d model \u00d7 d k , W V i \u2208 R d model \u00d7 d v and W O \u2208 R hd v \u00d7 d model . In this work we employ h = 8 parallel attention...",
              "Attention( Q, K, V ) = softmax( QK T \u221a d k ) V (1) The two most commonly used attention functions are additive attention [ 2 ], and dot-product (multi- plicative) attention. Dot-product attention i...",
              "3 Scaled Dot-Product Attention Multi-Head Attention Figure 2: (left) Scaled Dot-Product Attention. (right) Multi-Head Attention consists of several attention layers running in parallel. of the valu...",
              "\u2217 Equal contribution. Listing order is random. Jakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea. Ashish, with Illia, designed and implemented the first...",
              "4 To illustrate why the dot products get large, assume that the components of q and k are independent random variables with mean 0 and variance 1 . Then their dot product, q \u00b7 k = \ufffd d k i =1 q i k..."
            ],
            "similarity_scores": [
              0.014255167498218105,
              0.023176550783912748,
              0.010186757215619695,
              0.009188361408882083,
              0.005221932114882507
            ],
            "top_similarity": 0.023176550783912748
          },
          {
            "gold_passages": [
              "We refer to the change in the distributions of internal nodes of a deep network, in the course of training, as internal covariate shift. Eliminating it offers a promise of faster training. We propose a new mechanism, which we call Batch Normalization, that takes a step towards reducing internal covariate shift, and in doing so dramatically accelerates the training of deep neural nets."
            ],
            "hit_at_k": 0.0,
            "id": "bn-internal-shift",
            "latency_ms": 25.56558400101494,
            "match_strategy": "passage",
            "ndcg_at_k": 0.8234279242447697,
            "query": "What phenomenon does batch normalization seek to reduce?",
            "retrieved_fingerprints": [
              "01209da38b64e8a40c99911c",
              "556f31e7ce15c896bbc362eb",
              "5d5f729932713a425e70a634",
              "285fa316f748391498365197",
              "d9bef12f6eac5511d5b4f87a"
            ],
            "retrieved_snippets": [
              "3.3 Batch Normalization enables higher learning rates In traditional deep networks, too-high learning rate may result in the gradients that explode or vanish, as well as getting stuck in poor local...",
              "entiating characteristics of Batch Normalization include the learned scale and shift that allow the BN transform to represent identity (the standardization layer did not re- quire this since it was...",
              "Batch Normalization can be applied to any set of acti- vations in the network. Here, we focus on transforms 4 that consist of an af\ufb01ne transformation followed by an element-wise nonlinearity: z = g...",
              "Interestingly, our method bears similarity to the stan- dardization layer of (G\u00a8ulc\u00b8ehre & Bengio, 2013), though the two methods stem from very different goals, and per- form different tasks. The g...",
              "Simply adding Batch Normalization to a network does not take full advantage of our method. To do so, we further changed the network and its training parameters, as fol- lows: Increase learning rate..."
            ],
            "similarity_scores": [
              0.03912716328066215,
              0.014874141876430207,
              0.07394957983193277,
              0.033783783783783786,
              0.005378753922008068
            ],
            "top_similarity": 0.07394957983193277
          },
          {
            "gold_passages": [
              "On the Image Net dataset we evaluate residual nets with a depth of up to 152 layers-8x deeper than VGG nets but still having lower complexity. An ensemble of these residual nets achieves 3.57% error on the Image Net testset. This result won the 1st place on the ILSVRC 2015 classification task."
            ],
            "hit_at_k": 0.0,
            "id": "resnet-imagenet-error",
            "latency_ms": 23.987707994820084,
            "match_strategy": "passage",
            "ndcg_at_k": 0.8515912803972737,
            "query": "What ImageNet test error does the residual net ensemble achieve?",
            "retrieved_fingerprints": [
              "5c42df5558933ec8dc1b30d6",
              "d9d5283f065cf2462823c178",
              "aeaf0263a90b8eee5128031f",
              "c64381a773db60976f40388c",
              "4351f3522265473a303599ce"
            ],
            "retrieved_snippets": [
              "4. Experiments 4.1. ImageNet Classi\ufb01cation We evaluate our method on the ImageNet 2012 classi\ufb01- cation dataset [36] that consists of 1000 classes. The models are trained on the 1.28 million trainin...",
              "In Sec. 4.2, we apply Batch Normalization to the best- performing ImageNet classi\ufb01cation network, and show that we can match its performance using only 7% of the training steps, and can further exc...",
              "The current reported best results on the ImageNet Large Scale Visual Recognition Competition are reached by the Deep Image ensemble of traditional models (Wu et al., 2015) and the ensemble model of...",
              "3 We have experimented with more training iterations (3 \u00d7 ) and still ob- served the degradation problem, suggesting that this problem cannot be feasibly addressed by simply using more iterations....",
              "RPN ResNet-101 dense ResNet-101 14.4 RPN+RCNN ResNet-101 dense ResNet-101 10.6 RPN+RCNN ensemble dense ensemble 8.9 Table 13. Localization error (%) on the ImageNet validation. In the column of \u201cLO..."
            ],
            "similarity_scores": [
              0.013640238704177323,
              0.03133903133903134,
              0.020744356314826115,
              0.016515276630883566,
              0.031578947368421054
            ],
            "top_similarity": 0.031578947368421054
          },
          {
            "gold_passages": [
              "We introduce a new language representation model called BERT, which stands for Bidirectional Encoder Representations from Transformers."
            ],
            "hit_at_k": 0.0,
            "id": "bert-acronym",
            "latency_ms": 27.157959004398435,
            "match_strategy": "passage",
            "ndcg_at_k": 0.9530332685033294,
            "query": "What does the acronym BERT stand for?",
            "retrieved_fingerprints": [
              "3c1b8a6195261a8e3385b961",
              "ac74c9ae9671c22e79d89ac4",
              "da80e9f24afd0b8a08ae222a",
              "c3bfe1fcbdfde1a592e42485",
              "3c44a4f9f01381a398d0827a"
            ],
            "retrieved_snippets": [
              "BERT is conceptually simple and empirically powerful. It obtains new state-of-the-art re- sults on eleven natural language processing tasks, including pushing the GLUE score to 80.5% (7.7% point ab...",
              "BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding Jacob Devlin Ming-Wei Chang Kenton Lee Kristina Toutanova Google AI Language { jacobdevlin,mingweichang,kentonl,kris...",
              "We organize the appendix into three sections: \u2022 Additional implementation details for BERT are presented in Appendix A ; \u2022 Additional details for our experiments are presented in Appendix B ; and \u2022...",
              "Results are presented in Table 1 . Both BERT BASE and BERT LARGE outperform all sys- tems on all tasks by a substantial margin, obtaining 4.5% and 7.0% respective average accuracy im- provement ove...",
              "System Dev Test ESIM+GloVe 51.9 52.7 ESIM+ELMo 59.1 59.2 OpenAI GPT - 78.0 BERT BASE 81.6 - BERT LARGE 86.6 86.3 Human (expert) \u2020 - 85.0 Human (5 annotations) \u2020 - 88.0 Table 4: SWAG Dev and Test ac..."
            ],
            "similarity_scores": [
              0.19614711033274956,
              0.25267249757045673,
              0.13176007866273354,
              0.12025316455696203,
              0.1792452830188679
            ],
            "top_similarity": 0.25267249757045673
          },
          {
            "gold_passages": [
              "Specifically, our proposed model, DeepLabv3+, extends DeepLabv3 by adding a simple yet effective decoder module to refine the segmentation results especially along object boundaries."
            ],
            "hit_at_k": 0.0,
            "id": "deeplab-decoder",
            "latency_ms": 40.75899999588728,
            "match_strategy": "passage",
            "ndcg_at_k": 0.7163121298322872,
            "query": "What module does DeepLabv3+ add to improve segmentation boundaries?",
            "retrieved_fingerprints": [
              "b10accd59037cb276bcaff72",
              "811df1c4dea2bbf2f18775b7",
              "aaf0f8629e8d835ef56af1cc",
              "cfa12000962cb459f43403fb",
              "790115bd62f7a24f2a1a6a9a"
            ],
            "retrieved_snippets": [
              "4.4 Improvement along Object Boundaries In this subsection, we evaluate the segmentation accuracy with the trimap exper- iment [ 14 , 40 , 39 ] to quantify the accuracy of the proposed decoder modu...",
              "DeepLabv3+: Encoder-Decoder with Atrous Separable Convolution 3 semantic segmentation, and applying the atrous separable convolution to both the ASPP and decoder modules. Finally, we demonstrate th...",
              "Abstract. Spatial pyramid pooling module or encode-decoder structure are used in deep neural networks for semantic segmentation task. The former networks are able to encode multi-scale contextual i...",
              "We de\ufb01ne \u201cDeepLabv3 feature map\u201d as the last feature map computed by DeepLabv3 ( i.e ., the features containing ASPP features and image-level fea- tures), and [ k \u00d7 k, f ] as a convolution operatio...",
              "4 L.-C Chen, Y. Zhu, G. Papandreou, F. Schro\ufb00, and H. Adam 1x1 Conv 3x3 Conv rate 6 3x3 Conv rate 12 3x3 Conv rate 18 Image Pooling 1x1 Conv 1x1 Conv Low-Level Features Upsample by 4 Concat 3x3 Con..."
            ],
            "similarity_scores": [
              0.06542056074766354,
              0.21724137931034482,
              0.24275862068965517,
              0.08666442727578098,
              0.39095744680851063
            ],
            "top_similarity": 0.39095744680851063
          }
        ]
      },
      "details": [
        "hit@5 below threshold 0.000< 0.7",
        "avg top similarity 0.183< 0.82"
      ],
      "duration_seconds": 0.2675769179913914,
      "metrics": {
        "hit_at_k_avg": 0.0,
        "latency_ms_all": [
          91.70108399848687,
          26.827832996787038,
          31.57774999999674,
          25.56558400101494,
          23.987707994820084,
          27.157959004398435,
          40.75899999588728
        ],
        "latency_p50_ms": 27.157959004398435,
        "latency_p95_ms": 76.41845879770696,
        "ndcg_at_k_avg": 0.8613588374365845,
        "queries_run": 7,
        "top_similarity_all": [
          0.33994334277620397,
          0.16833095577746077,
          0.023176550783912748,
          0.07394957983193277,
          0.031578947368421054,
          0.25267249757045673,
          0.39095744680851063
        ],
        "top_similarity_avg": 0.1829441887024141
      },
      "status": "failed"
    }
  },
  "timestamp": "2025-10-17T18:57:47.220622+00:00"
}